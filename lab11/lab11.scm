(define (cadr lst) (car (cdr lst)))

(define (make-kwlist1 keys values)
  (cons keys (cons values
                    '()
              ))
)

(define (get-keys-kwlist1 kwlist) 
  (car kwlist)
)

(define (get-values-kwlist1 kwlist)
  (cadr kwlist)
)

(define (make-kwlist2 keys values)
  (if (or (null? keys) (null? values))
    '()
    (let ((one (car keys))
        (two (car values)))
      (cons (list one two)
            (make-kwlist2 (cdr keys) (cdr values))      
      )
    )  
  )
)

(define (get-keys-kwlist2 kwlist)
  (if (null? kwlist)
    '()
    (cons (car(car kwlist))
        (get-keys-kwlist2 (cdr kwlist))
    )
  )
)

(define (get-values-kwlist2 kwlist)
  (if (null? kwlist)
    '()
    (cons (car(cdr(car kwlist))) 
          (get-values-kwlist2  (cdr kwlist))
    )
  )
  
)

(define (add-to-kwlist kwlist key value)
  (let ((keys (get-keys-kwlist kwlist))
        (values (get-values-kwlist kwlist)))
      (make-kwlist (append keys (list key))
                    (append values (list value)))   
  )
)

(define (get-first-from-kwlist kwlist key)
  (let ((current_key  (car(get-keys-kwlist kwlist)))
          (value (car(get-values-kwlist kwlist))))
      (if (equal? current_key key)
        value
        (if (or (null? (cdr (get-keys-kwlist kwlist))) (null? (cdr (get-values-kwlist kwlist))))
          '()
          (get-first-from-kwlist  (make-kwlist (cdr(get-keys-kwlist kwlist)) 
                                            (cdr(get-values-kwlist kwlist)))
                                            key
                                            )
        )
        
      )
  )
)
